@inject IConfiguration configuration
@inject IExchangeRateRealtimeService realtimeService

<div class="card mx-auto" style="width: 18rem;">
    <div class="card-body">
        <h5 class="card-title">Current Exchange</h5>
        <EditForm Model="Model" OnSubmit="Submit" FormName="ExchangeForm">
            <div class="mb-3">
                <label>
                    From Currency:
                    <InputSelect class="form-select" @bind-Value="Model.FromCurrency">
                        @foreach (DisplayCurrency display in displays)
                        {
                            <option value="@display.Id">@display.Name (ID: @display.Id)</option>
                        }
                    </InputSelect>
                </label>
            </div>
            <div class="mb-3">
                <label>
                    To Currency:
                    <InputSelect class="form-select" @bind-Value="Model.ToCurrency">
                        @foreach (DisplayCurrency display in displays)
                        {
                            <option value="@display.Id">@display.Name (ID: @display.Id)</option>
                        }
                    </InputSelect>
                </label>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
    </div>
</div>
<div class="card mx-auto mt-1" style="width: 18rem;@(resultVisible ? "display:block" : "display:none")">
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="h2">@errorMessage</div>
    }
    else if (exchangeRate is null)
    {
        <div class="h2">There is no exchange data.</div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <h5>@exchangeRate.RealtimeCurrencyExchangeRate.FromCurrencyName (@exchangeRate.RealtimeCurrencyExchangeRate.FromCurrencyCode)</h5>
                <p>→ @exchangeRate.RealtimeCurrencyExchangeRate.ToCurrencyName (@exchangeRate.RealtimeCurrencyExchangeRate.ToCurrencyCode)</p>
                <p><strong>Rate:</strong> @exchangeRate.RealtimeCurrencyExchangeRate.ExchangeRate</p>
                <p><strong>Last Updated:</strong> @exchangeRate.RealtimeCurrencyExchangeRate.LastRefreshed (@exchangeRate.RealtimeCurrencyExchangeRate.TimeZone)</p>
            </div>
        </div>
    }
</div>
@code {
    [SupplyParameterFromForm]
    private ExchangeCurrentForm? Model { get; set; }
    private readonly DisplayCurrency[] displays = new[]
    {
        new DisplayCurrency { Id = "USD", Name = "US Dollar" },
        new DisplayCurrency { Id = "EUR", Name = "Euro" },
        new DisplayCurrency { Id = "JPY", Name = "Japanese Yen" }
    };
    private ExchangeRateRealtimeResponse exchangeRate;
    private string errorMessage;
    private string apiKey;
    private bool resultVisible = false;

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
        apiKey = configuration.GetSection("AlphaVantageApiKey").Get<string>()!;
    }

    private async Task Submit()
    {
        try
        {
            exchangeRate = await realtimeService.GetExchangeRateRealtime(apiKey, Model.FromCurrency, Model.ToCurrency);
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"There was an error: {ex.Message}";
        }

        resultVisible = true;
    }
}
